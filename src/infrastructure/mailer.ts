/* eslint-disable @typescript-eslint/no-var-requires */
import nodemailer from 'nodemailer';

import config from '../config';

export type EmailRecipient = {
  name: string;
  email: string;
};

class Mailer {
  private smtpTransport;

  constructor() {
    this.smtpTransport = nodemailer.createTransport({
      host: config.mailer.host,
      port: config.mailer.port,
      secure: true,
      auth: {
        user: config.mailer.user,
        pass: config.mailer.pass,
      },
    });
  }

  public async send(
    recipient: string[],
    subject: string,
    body: string,
    copyCarbon?: string[],
  ): Promise<void> {
    const mailOptions = {
      to: recipient,
      from: config.mailer.user,
      cc: copyCarbon,
      subject,
      html: body,
    };

    await this.smtpTransport.sendMail(mailOptions);
  }
}

export interface IUserMailerSender {
  receiveDefaultPassword(email: string, autoGeneratedPassword: string): Promise<void>;
  receiveOnResetPassword(
    email: string,
    token: string,
    autoGeneratedPassword: string,
  ): Promise<void>;
}

export class UserMailerReceiver extends Mailer implements IUserMailerSender {
  public async receiveDefaultPassword(email: string, autoGeneratedPassword: string): Promise<void> {
    const subject = 'Your default password';
    const template = require('../assets/html/defaultPassword.pug');

    const body = template({
      autoGeneratePassword: autoGeneratedPassword,
      cuWellUrl: `${config.frontEndDomain}`,
    });

    await this.send([email], subject, body);
  }

  public async receiveOnResetPassword(
    email: string,
    token: string,
    autoGeneratedPassword: string,
  ): Promise<void> {
    const subject = 'Password Reset';
    const host = config.frontEndDomain;
    const template = require('../assets/html/resetPassword.pug');
    const body = template({
      autoGeneratePassword: autoGeneratedPassword,
      resetUrl: `${host}/auth/recovery/${token}`,
    });

    await this.send([email], subject, body);
  }
}
